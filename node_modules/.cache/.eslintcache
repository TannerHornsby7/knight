[{"/home/tanner/Development/odin-project/javascript-path/cs/knight/src/index.js":"1","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/App.js":"2","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/body.js":"3","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/board.js":"4","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/logic.js":"5","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/square.js":"6"},{"size":254,"mtime":1687292072904,"results":"7","hashOfConfig":"8"},{"size":165,"mtime":1687327674915,"results":"9","hashOfConfig":"8"},{"size":4917,"mtime":1687328783632,"results":"10","hashOfConfig":"8"},{"size":1892,"mtime":1687324805672,"results":"11","hashOfConfig":"8"},{"size":2414,"mtime":1687319353835,"results":"12","hashOfConfig":"8"},{"size":1417,"mtime":1687324697076,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ws36cj",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tanner/Development/odin-project/javascript-path/cs/knight/src/index.js",[],[],"/home/tanner/Development/odin-project/javascript-path/cs/knight/src/App.js",[],[],"/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/body.js",["34","35"],[],"// create a body component that takes board as a prop\n\nimport React from 'react';\nimport Board from './board';\nimport './body.scss';\nimport { neighbors, bfs } from '../logic.js';\n\n// listen for when the enter key is pressed. when it is, fire badoosh\n\n\nfunction start() {\n    // set the start and stop squares from the input fields\n    let start = document.querySelector('.start').id;\n    let stop = document.querySelector('.stop').id;\n    console.log('start is: ' + start);\n    console.log('stop is: ' + stop);\n    let current = start;\n    let path = bfs(start, stop);\n    // mark all the squares in the path, one by one, with 1 second between\n    // making them glow a bit brighter when they are first marked\n    // then making them glow a bit dimmer when they are unmarked\n\n    for (let i = 0; i < path.length; i++) {\n        //wait 1 second\n        setTimeout(() => {\n            // unmark the previous square\n            if (i > 0) {\n                document.getElementById(path[i - 1]).style.borderWidth = '5px';\n            }\n            // mark the current square\n            document.getElementById(path[i]).style.borderColor = 'blue';\n            document.getElementById(path[i]).style.borderWidth = '9px';\n            // set the current square\n            current = path[i];\n            // if the current square is the stop square, stop\n            if (current === stop) {\n                return;\n            }\n        }, 1000 * i);\n    }\n}\n\nfunction stop() {\n    clearInterval();\n}\n\nfunction reset() {\n    // reset the board\n    const board = document.querySelectorAll('.square');\n    for (let i = 0; i < board.length; i++) {\n        board[i].style.borderColor = 'black';\n        board[i].style.borderWidth = '3px';\n        //clear all text content\n        board[i].innerHTML = '';\n    }\n    // remove classes from current start and stop squares\n    // and add them to the default start and stop squares\n    document.querySelector('.start').innerHTML = '';\n    document.querySelector('.stop').innerHTML = '';\n    document.querySelector('.start').classList.remove('start');\n    document.querySelector('.stop').classList.remove('stop');\n    document.getElementById('0 0').classList.add('start');\n    document.getElementById('7 7').classList.add('stop');\n    document.getElementById('0 0').innerHTML = 'START';\n    document.getElementById('7 7').innerHTML = 'STOP';\n    // rerender\n}\n\nfunction badoosh() {\n    let st = document.getElementById('start');   \n    let sto = document.getElementById('stop'); \n    \n    if (!(st && sto && st.value && sto.value)) {\n        return <Board start='0 0' stop='7 7'/>// return alert('Invalid square input, please follow format: x y where 0 <= x,y <= 7')\n    }else if (!(st.value[1] === ' ' && sto.value[1] === ' ') || !(st.value.length === 3 && sto.value.length === 3)) {\n        return <Board start='0 0' stop='7 7'/>// return alert('Invalid square input, please follow format: x y where 0 <= x,y <= 7')\n    } else {\n        let [st_i, st_j] = st.value.split(' ');\n        let [sto_i, sto_j] = sto.value.split(' ');\n        st_i = parseInt(st_i);\n        st_j = parseInt(st_j);\n        sto_i = parseInt(sto_i);\n        sto_j = parseInt(sto_j);\n\n        let cond2 = st_i >= 0 && st_i < 8 && st_j >= 0 && st_j < 8;\n        let cond3 = sto_i >= 0 && sto_i < 8 && sto_j >= 0 && sto_j < 8;\n        let cond4 = st_i !== sto_i || st_j !== sto_j;\n        let cond = cond2 && cond3 && cond4;\n        if (cond) {\n            // update the board with the new start and stop squares\n            // update the text\n            document.querySelector('.start').innerHTML = '';\n            document.querySelector('.stop').innerHTML = '';\n            document.querySelector('.start').classList.remove('start');\n            document.querySelector('.stop').classList.remove('stop');\n            document.getElementById(st.value).classList.add('start');\n            document.getElementById(sto.value).classList.add('stop');\n            document.getElementById(st.value).innerHTML = 'START';\n            document.getElementById(sto.value).innerHTML = 'STOP';\n            return <Board start={st.value} stop={sto.value}/>\n        } else {\n        <Board start='0 0' stop='7 7'/>// : alert('Invalid square input, please follow format: x y where 0 <= x,y <= 7')\n    }}\n};\n\nexport default function Body(props) {\n    return (\n        <div className=\"body\">\n            <div className=\"buttons\">\n                <button onClick={reset}>Reset</button>\n                <button onClick={start}>Start</button>\n                <button onClick={stop}>Stop</button>\n                {/* make start and stop input fields */}\n                <input id=\"start\" type=\"text\" placeholder=\"0 0\" />\n                <input id=\"stop\" type=\"text\" placeholder=\"7 7\" />\n                <button onClick={badoosh}>Set Points</button>\n            </div>\n            <Board start='0 0' stop='7 7'/>\n        </div>\n    );\n}","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/board.js",[],[],"/home/tanner/Development/odin-project/javascript-path/cs/knight/src/logic.js",["36","37"],[],"// IN: start_loc, stop_loc\n// OUT: path\n\n// finds neighboring squares for a knight to go to from a given location\nexport function neighbors(loc) {\n    // get the location\n    const [row, col] = [parseInt(loc[0]), parseInt(loc[2])];\n    // create an array of possible moves\n    const moves = [\n        [row + 2, col + 1],\n        [row + 2, col - 1],\n        [row - 2, col + 1],\n        [row - 2, col - 1],\n        [row + 1, col + 2],\n        [row + 1, col - 2],\n        [row - 1, col + 2],\n        [row - 1, col - 2]\n    ];\n    // filter out moves that are off the board\n    const valid_moves = moves.filter(move => {\n        const [row, col] = move;\n        return row >= 0 && row < 8 && col >= 0 && col < 8;\n    });\n    // transform moves into their string format\n    for (let i = 0; i < valid_moves.length; i++) {\n        valid_moves[i] = String(valid_moves[i][0]) + ' ' + String(valid_moves[i][1]);\n    }\n    // return the valid moves\n    return valid_moves;\n}\n\n// finds the shortest path from start_loc to stop_loc using a bfs\nexport function bfs(start, stop) {\n    let predecessors = {}\n    for (let i = 0; i < 8; i++) {\n        for (let j = 0; j < 8; j++){\n            predecessors[String(i) + ' ' + String(j)] = ' '\n        }\n    }\n\n    let q = [start]\n    let visited = new Set()\n\n    while (q){\n        let curr = q.shift();\n        if (curr == stop) {\n            break\n        }\n        visited.add(curr)\n        let ns = neighbors(curr)\n        for (let i = 0; i < ns.length; i++) {\n            // if  (visited.has(ns[i])) {\n            //     console.log('the value ' + ns[i] + ' has been visited.');\n            // } else {\n            //     console.log('the value ' + ns[i] + ' has not been visited.');\n            // }\n            // console.log('the value of q is ' + q)\n            // console.log('the visited set is: ' + visited)\n            if (!(visited.has(ns[i]))) {\n                q.push(ns[i])\n                predecessors[ns[i]] = curr\n            }\n        }\n    }\n\n    let path = []\n    let curr = stop\n    console.log('finding path')\n    console.log(predecessors[stop])\n    console.log(predecessors[predecessors[stop]])\n    console.log(predecessors[predecessors[predecessors[stop]]])\n    while (curr != start) {\n        path.push(curr)\n        console.log(curr)\n        let tmp = predecessors[curr]\n        curr = tmp\n    }\n\n    path.push(start)\n    path.reverse()\n\n    return path\n}","/home/tanner/Development/odin-project/javascript-path/cs/knight/src/components/square.js",[],[],{"ruleId":"38","severity":1,"message":"39","line":6,"column":10,"nodeType":"40","messageId":"41","endLine":6,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":25,"column":20,"nodeType":"44","messageId":"45","endLine":39,"endColumn":10},{"ruleId":"46","severity":1,"message":"47","line":46,"column":18,"nodeType":"48","messageId":"49","endLine":46,"endColumn":20},{"ruleId":"46","severity":1,"message":"50","line":72,"column":17,"nodeType":"48","messageId":"49","endLine":72,"endColumn":19},"no-unused-vars","'neighbors' is defined but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'current', 'current'.","ArrowFunctionExpression","unsafeRefs","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='."]